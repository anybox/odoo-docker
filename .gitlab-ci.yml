variables:
  IMAGE: "$CI_REGISTRY_IMAGE"
  COMMIT_TAG: "$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-$CI_PIPELINE_ID"
  COMPOSE_FILE_TESTS: docker-compose-tests.yml

services:
  - docker:dind

stages:
  - build
  # - optimization
  - test
  - pre-deploy
  - deploy
  - post-deploy

build:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_ENV_CI_REGISTRY
    - export BUILD_DT=`date -Iseconds`
    - |-
        docker build --pull \
          --cache-from $IMAGE:cache \
          --build-arg REVISION=$CI_COMMIT_SHA \
          --build-arg VERSION=$CI_COMMIT_TAG \
          --build-arg BUILD_DATETIME=$BUILD_DT \
          --build-arg IMAGE=$IMAGE \
          -t "$IMAGE:$COMMIT_TAG" odoo
    - docker push "$IMAGE:$COMMIT_TAG"

test:
  stage: test
  image: registry.anybox.cloud/infra/infra-cli:dev
  script:
    - export DOCKER_HOST=tcp://docker:2375/
    - make test
    - toolbox_cli analyse-odoo-tests test.log
  artifacts:
    when: always
    paths:
      - test.log
    expire_in: 1 day


# cache-image:
#   stage: optimization
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_ENV_CI_REGISTRY
#     - docker pull "$IMAGE:$COMMIT_TAG"
#     - docker tag "$IMAGE:$COMMIT_TAG" "$IMAGE:cache"
#     - docker push "$IMAGE:cache"
#   allow_failure: true

# container_scanning:
#   stage: optimization
#   variables:
#     DOCKER_DRIVER: overlay2
#   services:
#     - docker:stable-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_ENV_CI_REGISTRY
#     - docker run -d --name db arminc/clair-db:latest
#     - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
#     - apk add -U wget ca-certificates
#     - docker pull $CI_REGISTRY_IMAGE:$COMMIT_TAG
#     - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
#     - mv clair-scanner_linux_amd64 clair-scanner
#     - chmod +x clair-scanner
#     - touch clair-whitelist.yml
#     - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
#     - retries=0
#     - echo "Waiting for clair daemon to start"
#     - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
#     - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml $CI_REGISTRY_IMAGE:$COMMIT_TAG || true
#   allow_failure: true
#   artifacts:
#     paths:
#       - gl-container-scanning-report.json

STAGING-prepare-to-deploy:
  stage: pre-deploy
  image: registry.anybox.cloud/infra/infra-cli:master
  environment:
    name: staging
    url: https://$DNS_STAGING
  script:
    - ls -al
    - pwd
    - aws_cli create-efs-repository $CI_PROJECT_PATH/psql-data staging
    - aws_cli create-efs-repository $CI_PROJECT_PATH/odoo-data staging
    - aws_cli create-dns-if-not-exists $DNS_STAGING staging
  allow_failure: true
  when: manual

STAGING-deploy:
    stage: deploy
    image: registry.anybox.cloud/infra/infra-cli:master
    environment:
      name: staging
      url: https://$DNS_STAGING
    script:
      # deploy
      - MANAGERIP=$(aws_cli get-manager-ip staging)
      - export DOCKER_HOST=tcp://$MANAGERIP:2375
        # replace CI variables in compose file to make theme available by aws_cli
      - sed -i 's@$IMAGE:$COMMIT_TAG@'$IMAGE:$COMMIT_TAG'@g' docker-compose-staging.yml
      - sed -i 's@$CI_PROJECT_PATH@'$CI_PROJECT_PATH'@g' docker-compose-staging.yml
      - portainer_cli deploy-stack $PORTAINER_USER $PORTAINER_PASS $SERVICE_NAME $CI_ENVIRONMENT_NAME docker-compose-staging.yml $GITLAB_USER_LOGIN
      # tag image
      - docker pull "$CI_REGISTRY_IMAGE:$COMMIT_TAG"
      # - docker pull "$CI_REGISTRY_IMAGE:staging"
      # - docker tag "$CI_REGISTRY_IMAGE:staging" "$CI_REGISTRY_IMAGE:old-staging"
      - docker tag "$CI_REGISTRY_IMAGE:$COMMIT_TAG" "$CI_REGISTRY_IMAGE:staging"
      # - docker push "$CI_REGISTRY_IMAGE:old-staging"
      - docker push "$CI_REGISTRY_IMAGE:staging"
    when: manual

STAGING-remove:
    stage: post-deploy
    image: registry.anybox.cloud/infra/infra-cli:master
    environment:
      name: staging
      url: https://$DNS_STAGING
    script:
      - MANAGERIP=$(aws_cli get-manager-ip staging)
      - export DOCKER_HOST=tcp://$MANAGERIP:2375
      - portainer_cli remove-stack $PORTAINER_USER $PORTAINER_PASS $SERVICE_NAME $CI_ENVIRONMENT_NAME
    when: manual

# PROD-prepare-to-deploy:
#   stage: pre-deploy
#   image: registry.anybox.cloud/infra/infra-cli:dev
#   environment:
#     name: prod
#     url: https://$DNS_PROD
#   script:
#     - ls -al
#     - pwd
# ##Â Create folders on FS persistant datas:
#     - aws_cli create_efs_repository ETHERDRAW/psql-data prod
# ## Check / Create DNS ENTRY to swarm cluster
#     - echo "Create/Update DNS"
#     - aws_cli create_dns_if_not_exists $DNS_PROD prod
#   allow_failure: true
#   when: manual

# PROD-deploy:
#     stage: deploy
#     image: registry.anybox.cloud/infra/infra-cli:dev
#     environment:
#       name: prod
#       url: https://$DNS_PROD
#     variables:
#       SERVICE_NAME: $SERVICE_NAME
#     script:
#       # deploy
#       - MANAGERIP=$(aws_cli get_manager_ip prod)
#       - export DOCKER_HOST=tcp://$MANAGERIP:2375
#       - docker stack deploy --resolve-image always --with-registry-auth --compose-file=docker-compose-prod.yml $SERVICE_NAME
#       # tag image
#       - docker pull "$CI_REGISTRY_IMAGE:$COMMIT_TAG"
#       - docker pull "$CI_REGISTRY_IMAGE:prod"
#       - docker tag "$CI_REGISTRY_IMAGE:prod" "$CI_REGISTRY_IMAGE:old-prod"
#       - docker tag "$CI_REGISTRY_IMAGE:$COMMIT_TAG" "$CI_REGISTRY_IMAGE:prod"
#       - docker push "$CI_REGISTRY_IMAGE:old-prod"
#       - docker push "$CI_REGISTRY_IMAGE:prod"
#     when: manual
