variables:
  IMAGE: "$CI_REGISTRY_IMAGE"
  COMMIT_TAG: "$CI_COMMIT_REF_NAME-dev"
  COMPOSE_FILE_TESTS: docker-compose-tests.yml

services:
  - docker:dind

stages:
  - build
  # - optimization
  - test
  - pre-deploy
  - deploy
  - post-deploy

build:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_ENV_CI_REGISTRY
    - docker build --pull --cache-from $IMAGE:$COMMIT_TAG-postgresql -t "$IMAGE:odoo-$COMMIT_TAG" postgresql
    - docker build --pull --cache-from $IMAGE:$COMMIT_TAG-odoo -t "$IMAGE:odoo-$COMMIT_TAG" odoo
    - docker push "$IMAGE:$COMMIT_TAG"

test:
  stage: test
  image: registry.anybox.cloud/infra/infra-cli:dev
  script:
    - export DOCKER_HOST=tcp://docker:2375/
    - make test
    - toolbox_cli analyse-odoo-tests test.log
  artifacts:
    when: always
    paths:
      - test.log
    expire_in: 1 day


# container_scanning:
#   stage: optimization
#   variables:
#     DOCKER_DRIVER: overlay2
#   services:
#     - docker:stable-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_ENV_CI_REGISTRY
#     - docker run -d --name db arminc/clair-db:latest
#     - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
#     - apk add -U wget ca-certificates
#     - docker pull $CI_REGISTRY_IMAGE:$COMMIT_TAG
#     - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
#     - mv clair-scanner_linux_amd64 clair-scanner
#     - chmod +x clair-scanner
#     - touch clair-whitelist.yml
#     - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
#     - retries=0
#     - echo "Waiting for clair daemon to start"
#     - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
#     - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml $CI_REGISTRY_IMAGE:$COMMIT_TAG || true
#   allow_failure: true
#   artifacts:
#     paths:
#       - gl-container-scanning-report.json
